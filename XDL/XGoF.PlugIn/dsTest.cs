//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3328.4
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Deverest.XCodeX.PlugIn.DataLayer.Generated
{
    using System;
    using System.Xml;
    using System.Data;
    using System.Runtime.Serialization;
    using Deverest.Framework.XmlDataLayer;
    using Deverest.Framework.XmlDataLayer.Wrappers;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsTest : Deverest.Framework.XmlDataLayer.BaseDataSet
    {
        
        public dsTest(string schemaFile) : 
                base(schemaFile)
        {
        }
        
        public dsTest(string schemaFile, Deverest.Framework.XmlDataLayer.Wrappers.InternalDataSet state) : 
                base(schemaFile, state)
        {
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        private publishersDataTable publishers
        {
            get
            {
                return ((publishersDataTable)(this.RetrieveDataTable(typeof(publishersDataTable), "publishers")));
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        private titlesDataTable titles
        {
            get
            {
                return ((titlesDataTable)(this.RetrieveDataTable(typeof(titlesDataTable), "titles")));
            }
        }
        
        public delegate void publishersRowChangeEventHandler(object sender, publishersRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class publishersRowChangeEvent : System.EventArgs
        {
            
            private publishersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public publishersRowChangeEvent(publishersRow row, System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public publishersRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        public delegate void titlesRowChangeEventHandler(object sender, titlesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class titlesRowChangeEvent : System.EventArgs
        {
            
            private titlesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public titlesRowChangeEvent(titlesRow row, System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public titlesRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        public class publishersRow : Deverest.Framework.XmlDataLayer.BaseRow
        {
            
            internal publishersRow(System.Data.DataRow row) : 
                    base(row)
            {
            }
            
            internal publishersRow()
            {
            }
            
            public virtual string pub_id
            {
                get
                {
                    try
                    {
                        return ((string)(GetValue("pub_id")));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    SetValue("pub_id", value);
                }
            }
            
            public virtual string pub_name
            {
                get
                {
                    try
                    {
                        return ((string)(GetValue("pub_name")));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    SetValue("pub_name", value);
                }
            }
            
            public virtual string city
            {
                get
                {
                    try
                    {
                        return ((string)(GetValue("city")));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    SetValue("city", value);
                }
            }
            
            public virtual string state
            {
                get
                {
                    try
                    {
                        return ((string)(GetValue("state")));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    SetValue("state", value);
                }
            }
            
            public virtual string country
            {
                get
                {
                    try
                    {
                        return ((string)(GetValue("country")));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    SetValue("country", value);
                }
            }
            
            public titlesRow[] titles
            {
                get
                {
                    return ((titlesRow[])(GetChildRows("publisherstitles", typeof(titlesRow))));
                }
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(publishersRow);
            }
            
            protected override System.Type GetTableType()
            {
                return typeof(publishersDataTable);
            }
        }
        
        public class titlesRow : Deverest.Framework.XmlDataLayer.BaseRow
        {
            
            internal titlesRow(System.Data.DataRow row) : 
                    base(row)
            {
            }
            
            internal titlesRow()
            {
            }
            
            public virtual string title_id
            {
                get
                {
                    try
                    {
                        return ((string)(GetValue("title_id")));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    SetValue("title_id", value);
                }
            }
            
            public virtual string title
            {
                get
                {
                    try
                    {
                        return ((string)(GetValue("title")));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    SetValue("title", value);
                }
            }
            
            public virtual string type
            {
                get
                {
                    try
                    {
                        return ((string)(GetValue("type")));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    SetValue("type", value);
                }
            }
            
            public virtual string pub_id
            {
                get
                {
                    try
                    {
                        return ((string)(GetValue("pub_id")));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    SetValue("pub_id", value);
                }
            }
            
            public virtual System.Decimal price
            {
                get
                {
                    try
                    {
                        return ((System.Decimal)(GetValue("price")));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    SetValue("price", value);
                }
            }
            
            public virtual System.Decimal advance
            {
                get
                {
                    try
                    {
                        return ((System.Decimal)(GetValue("advance")));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    SetValue("advance", value);
                }
            }
            
            public virtual int royalty
            {
                get
                {
                    try
                    {
                        return ((int)(GetValue("royalty")));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    SetValue("royalty", value);
                }
            }
            
            public virtual int ytd_sales
            {
                get
                {
                    try
                    {
                        return ((int)(GetValue("ytd_sales")));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    SetValue("ytd_sales", value);
                }
            }
            
            public virtual string notes
            {
                get
                {
                    try
                    {
                        return ((string)(GetValue("notes")));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    SetValue("notes", value);
                }
            }
            
            public virtual System.DateTime pubdate
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(GetValue("pubdate")));
                    }
                    catch (System.InvalidCastException e)
                    {
                        throw new System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    SetValue("pubdate", value);
                }
            }
            
            public virtual publishersRow publishers
            {
                get
                {
                    return ((publishersRow)(GetParentRow("publisherstitles", typeof(publishersRow))));
                }
                set
                {
                    SetParentRow(value, this.Table.ParentRelations["publisherstitles"]);
                }
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(titlesRow);
            }
            
            protected override System.Type GetTableType()
            {
                return typeof(titlesDataTable);
            }
        }
        
        public class publishersDataTable : Deverest.Framework.XmlDataLayer.BaseDataTable
        {
            
            public publishersDataTable(System.Data.DataTable table) : 
                    base(table)
            {
            }
            
            private publishersRow this[int index]
            {
                get
                {
                    return ((publishersRow)(this.Rows[index]));
                }
            }
            
            public event publishersRowChangeEventHandler publishersRowChanged;
            
            public event publishersRowChangeEventHandler publishersRowChanging;
            
            public event publishersRowChangeEventHandler publishersRowDeleted;
            
            public event publishersRowChangeEventHandler publishersRowDeleting;
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.publishersRowChanged != null))
                {
                    this.publishersRowChanged(this, new publishersRowChangeEvent(new publishersRow(e.Row), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.publishersRowChanging != null))
                {
                    this.publishersRowChanging(this, new publishersRowChangeEvent(new publishersRow(e.Row), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.publishersRowDeleted != null))
                {
                    this.publishersRowDeleted(this, new publishersRowChangeEvent(new publishersRow(e.Row), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.publishersRowDeleting != null))
                {
                    this.publishersRowDeleting(this, new publishersRowChangeEvent(new publishersRow(e.Row), e.Action));
                }
            }
            
            public publishersRow Add(string pub_id, string pub_name, string city, string state, string country)
            {
                publishersRow row = this.NewRow();
                row.ItemArray = new object[] {
                        pub_id,
                        pub_name,
                        city,
                        state,
                        country};
                this.Rows.Add(row);
                return row;
            }
            
            public new virtual publishersRow NewRow()
            {
                return ((publishersRow)(this.NewRow()));
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(publishersRow);
            }
            
            public void Remove(publishersRow row)
            {
                this.Rows.Remove(row);
            }
            
            public void Remove(System.Data.DataRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        public class titlesDataTable : Deverest.Framework.XmlDataLayer.BaseDataTable
        {
            
            public titlesDataTable(System.Data.DataTable table) : 
                    base(table)
            {
            }
            
            private titlesRow this[int index]
            {
                get
                {
                    return ((titlesRow)(this.Rows[index]));
                }
            }
            
            public event titlesRowChangeEventHandler titlesRowChanged;
            
            public event titlesRowChangeEventHandler titlesRowChanging;
            
            public event titlesRowChangeEventHandler titlesRowDeleted;
            
            public event titlesRowChangeEventHandler titlesRowDeleting;
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.titlesRowChanged != null))
                {
                    this.titlesRowChanged(this, new titlesRowChangeEvent(new titlesRow(e.Row), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.titlesRowChanging != null))
                {
                    this.titlesRowChanging(this, new titlesRowChangeEvent(new titlesRow(e.Row), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.titlesRowDeleted != null))
                {
                    this.titlesRowDeleted(this, new titlesRowChangeEvent(new titlesRow(e.Row), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.titlesRowDeleting != null))
                {
                    this.titlesRowDeleting(this, new titlesRowChangeEvent(new titlesRow(e.Row), e.Action));
                }
            }
            
            public titlesRow Add(string title_id, string title, string type, string pub_id, System.Decimal price, System.Decimal advance, int royalty, int ytd_sales, string notes, System.DateTime pubdate)
            {
                titlesRow row = this.NewRow();
                row.ItemArray = new object[] {
                        title_id,
                        title,
                        type,
                        pub_id,
                        price,
                        advance,
                        royalty,
                        ytd_sales,
                        notes,
                        pubdate};
                this.Rows.Add(row);
                return row;
            }
            
            public new virtual titlesRow NewRow()
            {
                return ((titlesRow)(this.NewRow()));
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(titlesRow);
            }
            
            public void Remove(titlesRow row)
            {
                this.Rows.Remove(row);
            }
            
            public void Remove(System.Data.DataRow row)
            {
                this.Rows.Remove(row);
            }
        }
    }
}
