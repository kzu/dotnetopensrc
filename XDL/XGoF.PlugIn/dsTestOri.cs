//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3328.4
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Deverest.XGoF.PlugIn.DataLayer {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsTest : DataSet {
        
        private publishersDataTable tablepublishers;
        
        private titlesDataTable tabletitles;
        
        private DataRelation relationpublisherstitles;
        
        public dsTest() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsTest(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["publishers"] != null)) {
                    this.Tables.Add(new publishersDataTable(ds.Tables["publishers"]));
                }
                if ((ds.Tables["titles"] != null)) {
                    this.Tables.Add(new titlesDataTable(ds.Tables["titles"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public publishersDataTable publishers {
            get {
                return this.tablepublishers;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public titlesDataTable titles {
            get {
                return this.tabletitles;
            }
        }
        
        public override DataSet Clone() {
            dsTest cln = ((dsTest)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["publishers"] != null)) {
                this.Tables.Add(new publishersDataTable(ds.Tables["publishers"]));
            }
            if ((ds.Tables["titles"] != null)) {
                this.Tables.Add(new titlesDataTable(ds.Tables["titles"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablepublishers = ((publishersDataTable)(this.Tables["publishers"]));
            if ((this.tablepublishers != null)) {
                this.tablepublishers.InitVars();
            }
            this.tabletitles = ((titlesDataTable)(this.Tables["titles"]));
            if ((this.tabletitles != null)) {
                this.tabletitles.InitVars();
            }
            this.relationpublisherstitles = this.Relations["publisherstitles"];
        }
        
        private void InitClass() {
            this.DataSetName = "dsTest";
            this.Prefix = "";
            this.Namespace = "Deverest.XGoF.PlugIn.DataLayer.Generated";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablepublishers = new publishersDataTable();
            this.Tables.Add(this.tablepublishers);
            this.tabletitles = new titlesDataTable();
            this.Tables.Add(this.tabletitles);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("publisherstitles", new DataColumn[] {
                        this.tablepublishers.pub_idColumn}, new DataColumn[] {
                        this.tabletitles.pub_idColumn});
            this.tabletitles.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            this.relationpublisherstitles = new DataRelation("publisherstitles", new DataColumn[] {
                        this.tablepublishers.pub_idColumn}, new DataColumn[] {
                        this.tabletitles.pub_idColumn}, false);
            this.Relations.Add(this.relationpublisherstitles);
        }
        
        private bool ShouldSerializepublishers() {
            return false;
        }
        
        private bool ShouldSerializetitles() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void publishersRowChangeEventHandler(object sender, publishersRowChangeEvent e);
        
        public delegate void titlesRowChangeEventHandler(object sender, titlesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class publishersDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnpub_id;
            
            private DataColumn columnpub_name;
            
            private DataColumn columncity;
            
            private DataColumn columnstate;
            
            private DataColumn columncountry;
            
            internal publishersDataTable() : 
                    base("publishers") {
                this.InitClass();
            }
            
            internal publishersDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn pub_idColumn {
                get {
                    return this.columnpub_id;
                }
            }
            
            internal DataColumn pub_nameColumn {
                get {
                    return this.columnpub_name;
                }
            }
            
            internal DataColumn cityColumn {
                get {
                    return this.columncity;
                }
            }
            
            internal DataColumn stateColumn {
                get {
                    return this.columnstate;
                }
            }
            
            internal DataColumn countryColumn {
                get {
                    return this.columncountry;
                }
            }
            
            public publishersRow this[int index] {
                get {
                    return ((publishersRow)(this.Rows[index]));
                }
            }
            
            public event publishersRowChangeEventHandler publishersRowChanged;
            
            public event publishersRowChangeEventHandler publishersRowChanging;
            
            public event publishersRowChangeEventHandler publishersRowDeleted;
            
            public event publishersRowChangeEventHandler publishersRowDeleting;
            
            public void AddpublishersRow(publishersRow row) {
                this.Rows.Add(row);
            }
            
            public publishersRow AddpublishersRow(string pub_id, string pub_name, string city, string state, string country) {
                publishersRow rowpublishersRow = ((publishersRow)(this.NewRow()));
                rowpublishersRow.ItemArray = new object[] {
                        pub_id,
                        pub_name,
                        city,
                        state,
                        country};
                this.Rows.Add(rowpublishersRow);
                return rowpublishersRow;
            }
            
            public publishersRow FindBypub_id(string pub_id) {
                return ((publishersRow)(this.Rows.Find(new object[] {
                            pub_id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                publishersDataTable cln = ((publishersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            internal void InitVars() {
                this.columnpub_id = this.Columns["pub_id"];
                this.columnpub_name = this.Columns["pub_name"];
                this.columncity = this.Columns["city"];
                this.columnstate = this.Columns["state"];
                this.columncountry = this.Columns["country"];
            }
            
            private void InitClass() {
                this.columnpub_id = new DataColumn("pub_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpub_id);
                this.columnpub_name = new DataColumn("pub_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpub_name);
                this.columncity = new DataColumn("city", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncity);
                this.columnstate = new DataColumn("state", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstate);
                this.columncountry = new DataColumn("country", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncountry);
                this.Constraints.Add(new UniqueConstraint("dsTestKey1", new DataColumn[] {
                                this.columnpub_id}, true));
                this.columnpub_id.AllowDBNull = false;
                this.columnpub_id.Unique = true;
            }
            
            public publishersRow NewpublishersRow() {
                return ((publishersRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new publishersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(publishersRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.publishersRowChanged != null)) {
                    this.publishersRowChanged(this, new publishersRowChangeEvent(((publishersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.publishersRowChanging != null)) {
                    this.publishersRowChanging(this, new publishersRowChangeEvent(((publishersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.publishersRowDeleted != null)) {
                    this.publishersRowDeleted(this, new publishersRowChangeEvent(((publishersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.publishersRowDeleting != null)) {
                    this.publishersRowDeleting(this, new publishersRowChangeEvent(((publishersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovepublishersRow(publishersRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class publishersRow : DataRow {
            
            private publishersDataTable tablepublishers;
            
            internal publishersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablepublishers = ((publishersDataTable)(this.Table));
            }
            
            public string pub_id {
                get {
                    return ((string)(this[this.tablepublishers.pub_idColumn]));
                }
                set {
                    this[this.tablepublishers.pub_idColumn] = value;
                }
            }
            
            public string pub_name {
                get {
                    try {
                        return ((string)(this[this.tablepublishers.pub_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepublishers.pub_nameColumn] = value;
                }
            }
            
            public string city {
                get {
                    try {
                        return ((string)(this[this.tablepublishers.cityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepublishers.cityColumn] = value;
                }
            }
            
            public string state {
                get {
                    try {
                        return ((string)(this[this.tablepublishers.stateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepublishers.stateColumn] = value;
                }
            }
            
            public string country {
                get {
                    try {
                        return ((string)(this[this.tablepublishers.countryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepublishers.countryColumn] = value;
                }
            }
            
            public bool Ispub_nameNull() {
                return this.IsNull(this.tablepublishers.pub_nameColumn);
            }
            
            public void Setpub_nameNull() {
                this[this.tablepublishers.pub_nameColumn] = System.Convert.DBNull;
            }
            
            public bool IscityNull() {
                return this.IsNull(this.tablepublishers.cityColumn);
            }
            
            public void SetcityNull() {
                this[this.tablepublishers.cityColumn] = System.Convert.DBNull;
            }
            
            public bool IsstateNull() {
                return this.IsNull(this.tablepublishers.stateColumn);
            }
            
            public void SetstateNull() {
                this[this.tablepublishers.stateColumn] = System.Convert.DBNull;
            }
            
            public bool IscountryNull() {
                return this.IsNull(this.tablepublishers.countryColumn);
            }
            
            public void SetcountryNull() {
                this[this.tablepublishers.countryColumn] = System.Convert.DBNull;
            }
            
            public titlesRow[] GettitlesRows() {
                return ((titlesRow[])(this.GetChildRows(this.Table.ChildRelations["publisherstitles"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class publishersRowChangeEvent : EventArgs {
            
            private publishersRow eventRow;
            
            private DataRowAction eventAction;
            
            public publishersRowChangeEvent(publishersRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public publishersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class titlesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columntitle_id;
            
            private DataColumn columntitle;
            
            private DataColumn columntype;
            
            private DataColumn columnpub_id;
            
            private DataColumn columnprice;
            
            private DataColumn columnadvance;
            
            private DataColumn columnroyalty;
            
            private DataColumn columnytd_sales;
            
            private DataColumn columnnotes;
            
            private DataColumn columnpubdate;
            
            internal titlesDataTable() : 
                    base("titles") {
                this.InitClass();
            }
            
            internal titlesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn title_idColumn {
                get {
                    return this.columntitle_id;
                }
            }
            
            internal DataColumn titleColumn {
                get {
                    return this.columntitle;
                }
            }
            
            internal DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            internal DataColumn pub_idColumn {
                get {
                    return this.columnpub_id;
                }
            }
            
            internal DataColumn priceColumn {
                get {
                    return this.columnprice;
                }
            }
            
            internal DataColumn advanceColumn {
                get {
                    return this.columnadvance;
                }
            }
            
            internal DataColumn royaltyColumn {
                get {
                    return this.columnroyalty;
                }
            }
            
            internal DataColumn ytd_salesColumn {
                get {
                    return this.columnytd_sales;
                }
            }
            
            internal DataColumn notesColumn {
                get {
                    return this.columnnotes;
                }
            }
            
            internal DataColumn pubdateColumn {
                get {
                    return this.columnpubdate;
                }
            }
            
            public titlesRow this[int index] {
                get {
                    return ((titlesRow)(this.Rows[index]));
                }
            }
            
            public event titlesRowChangeEventHandler titlesRowChanged;
            
            public event titlesRowChangeEventHandler titlesRowChanging;
            
            public event titlesRowChangeEventHandler titlesRowDeleted;
            
            public event titlesRowChangeEventHandler titlesRowDeleting;
            
            public void AddtitlesRow(titlesRow row) {
                this.Rows.Add(row);
            }
            
            public titlesRow AddtitlesRow(string title_id, string title, string type, publishersRow parentpublishersRowBypublisherstitles, System.Decimal price, System.Decimal advance, int royalty, int ytd_sales, string notes, System.DateTime pubdate) {
                titlesRow rowtitlesRow = ((titlesRow)(this.NewRow()));
                rowtitlesRow.ItemArray = new object[] {
                        title_id,
                        title,
                        type,
                        parentpublishersRowBypublisherstitles[0],
                        price,
                        advance,
                        royalty,
                        ytd_sales,
                        notes,
                        pubdate};
                this.Rows.Add(rowtitlesRow);
                return rowtitlesRow;
            }
            
            public titlesRow FindBytitle_id(string title_id) {
                return ((titlesRow)(this.Rows.Find(new object[] {
                            title_id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                titlesDataTable cln = ((titlesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            internal void InitVars() {
                this.columntitle_id = this.Columns["title_id"];
                this.columntitle = this.Columns["title"];
                this.columntype = this.Columns["type"];
                this.columnpub_id = this.Columns["pub_id"];
                this.columnprice = this.Columns["price"];
                this.columnadvance = this.Columns["advance"];
                this.columnroyalty = this.Columns["royalty"];
                this.columnytd_sales = this.Columns["ytd_sales"];
                this.columnnotes = this.Columns["notes"];
                this.columnpubdate = this.Columns["pubdate"];
            }
            
            private void InitClass() {
                this.columntitle_id = new DataColumn("title_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntitle_id);
                this.columntitle = new DataColumn("title", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntitle);
                this.columntype = new DataColumn("type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntype);
                this.columnpub_id = new DataColumn("pub_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpub_id);
                this.columnprice = new DataColumn("price", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnprice);
                this.columnadvance = new DataColumn("advance", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnadvance);
                this.columnroyalty = new DataColumn("royalty", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnroyalty);
                this.columnytd_sales = new DataColumn("ytd_sales", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnytd_sales);
                this.columnnotes = new DataColumn("notes", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnotes);
                this.columnpubdate = new DataColumn("pubdate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpubdate);
                this.Constraints.Add(new UniqueConstraint("dsTestKey2", new DataColumn[] {
                                this.columntitle_id}, true));
                this.columntitle_id.AllowDBNull = false;
                this.columntitle_id.Unique = true;
                this.columntitle.AllowDBNull = false;
                this.columntype.AllowDBNull = false;
                this.columnpubdate.AllowDBNull = false;
            }
            
            public titlesRow NewtitlesRow() {
                return ((titlesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new titlesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(titlesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.titlesRowChanged != null)) {
                    this.titlesRowChanged(this, new titlesRowChangeEvent(((titlesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.titlesRowChanging != null)) {
                    this.titlesRowChanging(this, new titlesRowChangeEvent(((titlesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.titlesRowDeleted != null)) {
                    this.titlesRowDeleted(this, new titlesRowChangeEvent(((titlesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.titlesRowDeleting != null)) {
                    this.titlesRowDeleting(this, new titlesRowChangeEvent(((titlesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovetitlesRow(titlesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class titlesRow : DataRow {
            
            private titlesDataTable tabletitles;
            
            internal titlesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletitles = ((titlesDataTable)(this.Table));
            }
            
            public string title_id {
                get {
                    return ((string)(this[this.tabletitles.title_idColumn]));
                }
                set {
                    this[this.tabletitles.title_idColumn] = value;
                }
            }
            
            public string title {
                get {
                    return ((string)(this[this.tabletitles.titleColumn]));
                }
                set {
                    this[this.tabletitles.titleColumn] = value;
                }
            }
            
            public string type {
                get {
                    return ((string)(this[this.tabletitles.typeColumn]));
                }
                set {
                    this[this.tabletitles.typeColumn] = value;
                }
            }
            
            public string pub_id {
                get {
                    try {
                        return ((string)(this[this.tabletitles.pub_idColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletitles.pub_idColumn] = value;
                }
            }
            
            public System.Decimal price {
                get {
                    try {
                        return ((System.Decimal)(this[this.tabletitles.priceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletitles.priceColumn] = value;
                }
            }
            
            public System.Decimal advance {
                get {
                    try {
                        return ((System.Decimal)(this[this.tabletitles.advanceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletitles.advanceColumn] = value;
                }
            }
            
            public int royalty {
                get {
                    try {
                        return ((int)(this[this.tabletitles.royaltyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletitles.royaltyColumn] = value;
                }
            }
            
            public int ytd_sales {
                get {
                    try {
                        return ((int)(this[this.tabletitles.ytd_salesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletitles.ytd_salesColumn] = value;
                }
            }
            
            public string notes {
                get {
                    try {
                        return ((string)(this[this.tabletitles.notesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletitles.notesColumn] = value;
                }
            }
            
            public System.DateTime pubdate {
                get {
                    return ((System.DateTime)(this[this.tabletitles.pubdateColumn]));
                }
                set {
                    this[this.tabletitles.pubdateColumn] = value;
                }
            }
            
            public publishersRow publishersRow {
                get {
                    return ((publishersRow)(this.GetParentRow(this.Table.ParentRelations["publisherstitles"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["publisherstitles"]);
                }
            }
            
            public bool Ispub_idNull() {
                return this.IsNull(this.tabletitles.pub_idColumn);
            }
            
            public void Setpub_idNull() {
                this[this.tabletitles.pub_idColumn] = System.Convert.DBNull;
            }
            
            public bool IspriceNull() {
                return this.IsNull(this.tabletitles.priceColumn);
            }
            
            public void SetpriceNull() {
                this[this.tabletitles.priceColumn] = System.Convert.DBNull;
            }
            
            public bool IsadvanceNull() {
                return this.IsNull(this.tabletitles.advanceColumn);
            }
            
            public void SetadvanceNull() {
                this[this.tabletitles.advanceColumn] = System.Convert.DBNull;
            }
            
            public bool IsroyaltyNull() {
                return this.IsNull(this.tabletitles.royaltyColumn);
            }
            
            public void SetroyaltyNull() {
                this[this.tabletitles.royaltyColumn] = System.Convert.DBNull;
            }
            
            public bool Isytd_salesNull() {
                return this.IsNull(this.tabletitles.ytd_salesColumn);
            }
            
            public void Setytd_salesNull() {
                this[this.tabletitles.ytd_salesColumn] = System.Convert.DBNull;
            }
            
            public bool IsnotesNull() {
                return this.IsNull(this.tabletitles.notesColumn);
            }
            
            public void SetnotesNull() {
                this[this.tabletitles.notesColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class titlesRowChangeEvent : EventArgs {
            
            private titlesRow eventRow;
            
            private DataRowAction eventAction;
            
            public titlesRowChangeEvent(titlesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public titlesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
