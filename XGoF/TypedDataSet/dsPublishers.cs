//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3328.4
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Deverest.Generated.DataSets
{
    using System;
    using System.Xml;
    using System.Data;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsPublishers : DataSet
    {
        
        private System.Data.DataRelation relationpublisherstitles;
        
        private System.Data.DataRelation relationtitlestitleauthors;
        
        
			

		protected dsPublishers(SerializationInfo info, StreamingContext context) 
		{
			string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
			if ((strSchema != null)) {
				DataSet ds = new DataSet();
				ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
			
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
				this.InitVars();
			}
			else 
				this.InitClass();

			this.GetSerializationData(info, context);
			System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			this.Tables.CollectionChanged += schemaChangedHandler;
			this.Relations.CollectionChanged += schemaChangedHandler;
		}
        
		
		public override DataSet Clone() 
		{
			dsPublishers cln = ((dsPublishers)(base.Clone()));
			cln.InitVars();
			return cln;
		}

		protected override bool ShouldSerializeTables() 
		{
			return false;
		}

		protected override bool ShouldSerializeRelations() 
		{
			return false;
		}

		protected override void ReadXmlSerializable(XmlReader reader) 
		{
			this.Reset();
			DataSet ds = new DataSet();
			ds.ReadXml(reader);
			
			this.DataSetName = ds.DataSetName;
			this.Prefix = ds.Prefix;
			this.Namespace = ds.Namespace;
			this.Locale = ds.Locale;
			this.CaseSensitive = ds.CaseSensitive;
			this.EnforceConstraints = ds.EnforceConstraints;
			this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			this.InitVars();
		}

		protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() 
		{
			System.IO.MemoryStream stream = new System.IO.MemoryStream();
			this.WriteXmlSchema(new XmlTextWriter(stream, null));
			stream.Position = 0;
			return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
		}
			
			

		private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) 
		{
			if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
				this.InitVars();
			}
		}
						
			
		
        public dsPublishers()
        {
            
			this.InitClass();
			System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			this.Tables.CollectionChanged += schemaChangedHandler;
			this.Relations.CollectionChanged += schemaChangedHandler;
			
        }
        
        private void InitClass()
        {
            this.DataSetName = "dsPublishers";
            this.Prefix = "";
            this.Namespace = "Deverest.Generated.DataSets";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            System.Data.ForeignKeyConstraint fkc;
            this.tablepublishers = new publishersDataTable();
            this.Tables.Add(this.tablepublishers);
            this.tabletitles = new titlesDataTable();
            this.Tables.Add(this.tabletitles);
            fkc = new System.Data.ForeignKeyConstraint("publisherstitles", new System.Data.DataColumn[] {
                        this.tablepublishers.pub_idColumn,
                        this.tablepublishers.pub_nameColumn}, new System.Data.DataColumn[] {
                        this.tabletitles.titlepub_idColumn,
                        this.tabletitles.titleColumn});
            this.tabletitles.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationpublisherstitles = new System.Data.DataRelation("publisherstitles", new System.Data.DataColumn[] {
                        this.tablepublishers.pub_idColumn,
                        this.tablepublishers.pub_nameColumn}, new System.Data.DataColumn[] {
                        this.tabletitles.titlepub_idColumn,
                        this.tabletitles.titleColumn});
            this.relationpublisherstitles.Nested = true;
            this.Relations.Add(this.relationpublisherstitles);
            this.tabletitleauthors = new titleauthorsDataTable();
            this.Tables.Add(this.tabletitleauthors);
            fkc = new System.Data.ForeignKeyConstraint("titlestitleauthors", new System.Data.DataColumn[] {
                        this.tabletitles.title_idColumn}, new System.Data.DataColumn[] {
                        this.tabletitleauthors.title_idColumn});
            this.tabletitleauthors.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationtitlestitleauthors = new System.Data.DataRelation("titlestitleauthors", new System.Data.DataColumn[] {
                        this.tabletitles.title_idColumn}, new System.Data.DataColumn[] {
                        this.tabletitleauthors.title_idColumn});
            this.relationtitlestitleauthors.Nested = true;
            this.Relations.Add(this.relationtitlestitleauthors);
        }
        
        internal void InitVars()
        {
            this.tablepublishers = ((publishersDataTable)(this.Tables["publishers"]));
            if ((this.tablepublishers != null))
            {
                this.tablepublishers.InitVars();
            }
            this.tabletitles = ((titlesDataTable)(this.Tables["titles"]));
            if ((this.tabletitles != null))
            {
                this.tabletitles.InitVars();
            }
            this.relationpublisherstitles = this.Relations["publisherstitles"];
            this.tabletitleauthors = ((titleauthorsDataTable)(this.Tables["titleauthors"]));
            if ((this.tabletitleauthors != null))
            {
                this.tabletitleauthors.InitVars();
            }
            this.relationtitlestitleauthors = this.Relations["titlestitleauthors"];
        }
    }
}
