//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.288
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace NMatrix.Generated.DataSets
{
    using System;
    using System.Xml;
    using System.Data;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsPublishers : DataSet
    {
        
        private System.Data.DataRelation relationpublisherstitles;
        
        private System.Data.DataRelation relationtitlestitleauthors;
        
        
			
		private publishersDataTable tablepublishers;
			
		private titlesDataTable tabletitles;
			
		private titleauthorsDataTable tabletitleauthors;
			

		protected dsPublishers(SerializationInfo info, StreamingContext context) 
		{
			string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
			if ((strSchema != null)) {
				DataSet ds = new DataSet();
				ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
			
				if ((ds.Tables["publishers"] != null)) 
					this.Tables.Add(new publishersDataTable(ds.Tables["publishers"]));
			
				if ((ds.Tables["titles"] != null)) 
					this.Tables.Add(new titlesDataTable(ds.Tables["titles"]));
			
				if ((ds.Tables["titleauthors"] != null)) 
					this.Tables.Add(new titleauthorsDataTable(ds.Tables["titleauthors"]));
			
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
				this.InitVars();
			}
			else 
				this.InitClass();

			this.GetSerializationData(info, context);
			System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			this.Tables.CollectionChanged += schemaChangedHandler;
			this.Relations.CollectionChanged += schemaChangedHandler;
		}
        
		
		[System.ComponentModel.Browsable(false)]
		[System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
		public publishersDataTable publishers 
		{
			get { return this.tablepublishers; }
		}
			
		[System.ComponentModel.Browsable(false)]
		[System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
		public titlesDataTable titles 
		{
			get { return this.tabletitles; }
		}
			
		[System.ComponentModel.Browsable(false)]
		[System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
		public titleauthorsDataTable titleauthors 
		{
			get { return this.tabletitleauthors; }
		}
			
		public override DataSet Clone() 
		{
			dsPublishers cln = ((dsPublishers)(base.Clone()));
			cln.InitVars();
			return cln;
		}

		protected override bool ShouldSerializeTables() 
		{
			return false;
		}

		protected override bool ShouldSerializeRelations() 
		{
			return false;
		}

		protected override void ReadXmlSerializable(XmlReader reader) 
		{
			this.Reset();
			DataSet ds = new DataSet();
			ds.ReadXml(reader);
			
			if ((ds.Tables["publishers"] != null))
				this.Tables.Add(new publishersDataTable(ds.Tables["publishers"]));
			
			if ((ds.Tables["titles"] != null))
				this.Tables.Add(new titlesDataTable(ds.Tables["titles"]));
			
			if ((ds.Tables["titleauthors"] != null))
				this.Tables.Add(new titleauthorsDataTable(ds.Tables["titleauthors"]));
			
			this.DataSetName = ds.DataSetName;
			this.Prefix = ds.Prefix;
			this.Namespace = ds.Namespace;
			this.Locale = ds.Locale;
			this.CaseSensitive = ds.CaseSensitive;
			this.EnforceConstraints = ds.EnforceConstraints;
			this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			this.InitVars();
		}

		protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() 
		{
			System.IO.MemoryStream stream = new System.IO.MemoryStream();
			this.WriteXmlSchema(new XmlTextWriter(stream, null));
			stream.Position = 0;
			return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
		}
			
			
		private bool ShouldSerializepublishers() 
		{
			return false;
		}
			
		private bool ShouldSerializetitles() 
		{
			return false;
		}
			
		private bool ShouldSerializetitleauthors() 
		{
			return false;
		}
			

		private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) 
		{
			if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
				this.InitVars();
			}
		}
			
		public delegate void publishersRowChangeEventHandler(object sender, publishersRowChangeEvent e);
			
		public delegate void titlesRowChangeEventHandler(object sender, titlesRowChangeEvent e);
			
		public delegate void titleauthorsRowChangeEventHandler(object sender, titleauthorsRowChangeEvent e);
						
			
		[System.Diagnostics.DebuggerStepThrough()]
		public class publishersRowChangeEvent : EventArgs 
		{    
			private publishersRow eventRow;
			private DataRowAction eventAction;
		    
			public publishersRowChangeEvent(publishersRow row, DataRowAction action) 
			{
				this.eventRow = row;
				this.eventAction = action;
			}
		    
			public publishersRow Row 
			{
				get { return this.eventRow; }
			}
		    
			public DataRowAction Action 
			{
				get { return this.eventAction; }
			}
		}
			
		[System.Diagnostics.DebuggerStepThrough()]
		public class titlesRowChangeEvent : EventArgs 
		{    
			private titlesRow eventRow;
			private DataRowAction eventAction;
		    
			public titlesRowChangeEvent(titlesRow row, DataRowAction action) 
			{
				this.eventRow = row;
				this.eventAction = action;
			}
		    
			public titlesRow Row 
			{
				get { return this.eventRow; }
			}
		    
			public DataRowAction Action 
			{
				get { return this.eventAction; }
			}
		}
			
		[System.Diagnostics.DebuggerStepThrough()]
		public class titleauthorsRowChangeEvent : EventArgs 
		{    
			private titleauthorsRow eventRow;
			private DataRowAction eventAction;
		    
			public titleauthorsRowChangeEvent(titleauthorsRow row, DataRowAction action) 
			{
				this.eventRow = row;
				this.eventAction = action;
			}
		    
			public titleauthorsRow Row 
			{
				get { return this.eventRow; }
			}
		    
			public DataRowAction Action 
			{
				get { return this.eventAction; }
			}
		}
			
		
        public dsPublishers()
        {
            
			this.InitClass();
			System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
			this.Tables.CollectionChanged += schemaChangedHandler;
			this.Relations.CollectionChanged += schemaChangedHandler;
			
        }
        
        private void InitClass()
        {
            this.DataSetName = "dsPublishers";
            this.Prefix = "";
            this.Namespace = "NMatrix.Generated.DataSets";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            System.Data.ForeignKeyConstraint fkc;
            this.tablepublishers = new publishersDataTable();
            this.Tables.Add(this.tablepublishers);
            this.tabletitles = new titlesDataTable();
            this.Tables.Add(this.tabletitles);
            fkc = new System.Data.ForeignKeyConstraint("publisherstitles", new System.Data.DataColumn[] {
                        this.tablepublishers.pub_idColumn,
                        this.tablepublishers.pub_nameColumn}, new System.Data.DataColumn[] {
                        this.tabletitles.titlepub_idColumn,
                        this.tabletitles.titleColumn});
            this.tabletitles.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationpublisherstitles = new System.Data.DataRelation("publisherstitles", new System.Data.DataColumn[] {
                        this.tablepublishers.pub_idColumn,
                        this.tablepublishers.pub_nameColumn}, new System.Data.DataColumn[] {
                        this.tabletitles.titlepub_idColumn,
                        this.tabletitles.titleColumn});
            this.relationpublisherstitles.Nested = true;
            this.Relations.Add(this.relationpublisherstitles);
            this.tabletitleauthors = new titleauthorsDataTable();
            this.Tables.Add(this.tabletitleauthors);
            fkc = new System.Data.ForeignKeyConstraint("titlestitleauthors", new System.Data.DataColumn[] {
                        this.tabletitles.title_idColumn}, new System.Data.DataColumn[] {
                        this.tabletitleauthors.title_idColumn});
            this.tabletitleauthors.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationtitlestitleauthors = new System.Data.DataRelation("titlestitleauthors", new System.Data.DataColumn[] {
                        this.tabletitles.title_idColumn}, new System.Data.DataColumn[] {
                        this.tabletitleauthors.title_idColumn});
            this.relationtitlestitleauthors.Nested = true;
            this.Relations.Add(this.relationtitlestitleauthors);
        }
        
        internal void InitVars()
        {
            this.tablepublishers = ((publishersDataTable)(this.Tables["publishers"]));
            if ((this.tablepublishers != null))
            {
                this.tablepublishers.InitVars();
            }
            this.tabletitles = ((titlesDataTable)(this.Tables["titles"]));
            if ((this.tabletitles != null))
            {
                this.tabletitles.InitVars();
            }
            this.relationpublisherstitles = this.Relations["publisherstitles"];
            this.tabletitleauthors = ((titleauthorsDataTable)(this.Tables["titleauthors"]));
            if ((this.tabletitleauthors != null))
            {
                this.tabletitleauthors.InitVars();
            }
            this.relationtitlestitleauthors = this.Relations["titlestitleauthors"];
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class publishersRow : DataRow
        {
            
            
		private publishersDataTable tablepublishers;

		internal publishersRow(DataRowBuilder rb) : base(rb) 
		{
			this.tablepublishers = ((publishersDataTable)(this.Table));
		}
		
            /// <summary>XGoF generated member.</summary>
            public virtual string pub_id
            {
                get
                {
                    
				try 
				{
					return ((System.String)(this[this.tablepublishers.pub_idColumn]));
				}
				catch (InvalidCastException e) 
				{
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			
                }
                set
                {
                    
				this[this.tablepublishers.pub_idColumn] = value; 
			
                }
            }
            
            /// <summary>XGoF generated member.</summary>
            public virtual string pub_name
            {
                get
                {
                    
				try 
				{
					return ((System.String)(this[this.tablepublishers.pub_nameColumn]));
				}
				catch (InvalidCastException e) 
				{
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			
                }
                set
                {
                    
				this[this.tablepublishers.pub_nameColumn] = value; 
			
                }
            }
            
            /// <summary>XGoF generated member.</summary>
            public virtual string city
            {
                get
                {
                    
				try 
				{
					return ((System.String)(this[this.tablepublishers.cityColumn]));
				}
				catch (InvalidCastException e) 
				{
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			
                }
                set
                {
                    
				this[this.tablepublishers.cityColumn] = value; 
			
                }
            }
            
            /// <summary>XGoF generated member.</summary>
            public virtual string state
            {
                get
                {
                    
				try 
				{
					return ((System.String)(this[this.tablepublishers.stateColumn]));
				}
				catch (InvalidCastException e) 
				{
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			
                }
                set
                {
                    
				this[this.tablepublishers.stateColumn] = value; 
			
                }
            }
            
            /// <summary>XGoF generated member.</summary>
            public virtual string country
            {
                get
                {
                    
				try 
				{
					return ((System.String)(this[this.tablepublishers.countryColumn]));
				}
				catch (InvalidCastException e) 
				{
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			
                }
                set
                {
                    
				this[this.tablepublishers.countryColumn] = value; 
			
                }
            }
            
            private bool Ispub_idNull()
            {
                return this.IsNull(this.tablepublishers.pub_idColumn);
            }
            
            private void Setpub_idNull()
            {
                this[this.tablepublishers.pub_idColumn] = System.Convert.DBNull;
            }
            
            private bool Ispub_nameNull()
            {
                return this.IsNull(this.tablepublishers.pub_nameColumn);
            }
            
            private void Setpub_nameNull()
            {
                this[this.tablepublishers.pub_nameColumn] = System.Convert.DBNull;
            }
            
            private bool IscityNull()
            {
                return this.IsNull(this.tablepublishers.cityColumn);
            }
            
            private void SetcityNull()
            {
                this[this.tablepublishers.cityColumn] = System.Convert.DBNull;
            }
            
            private bool IsstateNull()
            {
                return this.IsNull(this.tablepublishers.stateColumn);
            }
            
            private void SetstateNull()
            {
                this[this.tablepublishers.stateColumn] = System.Convert.DBNull;
            }
            
            private bool IscountryNull()
            {
                return this.IsNull(this.tablepublishers.countryColumn);
            }
            
            private void SetcountryNull()
            {
                this[this.tablepublishers.countryColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class titlesRow : DataRow
        {
            
            
		private titlesDataTable tabletitles;

		internal titlesRow(DataRowBuilder rb) : base(rb) 
		{
			this.tabletitles = ((titlesDataTable)(this.Table));
		}
		
            /// <summary>XGoF generated member.</summary>
            public virtual string title_id
            {
                get
                {
                    
				try 
				{
					return ((System.String)(this[this.tabletitles.title_idColumn]));
				}
				catch (InvalidCastException e) 
				{
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			
                }
                set
                {
                    
				this[this.tabletitles.title_idColumn] = value; 
			
                }
            }
            
            /// <summary>XGoF generated member.</summary>
            public virtual string title
            {
                get
                {
                    
				try 
				{
					return ((System.String)(this[this.tabletitles.titleColumn]));
				}
				catch (InvalidCastException e) 
				{
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			
                }
                set
                {
                    
				this[this.tabletitles.titleColumn] = value; 
			
                }
            }
            
            /// <summary>XGoF generated member.</summary>
            public virtual string type
            {
                get
                {
                    
				try 
				{
					return ((System.String)(this[this.tabletitles.typeColumn]));
				}
				catch (InvalidCastException e) 
				{
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			
                }
                set
                {
                    
				this[this.tabletitles.typeColumn] = value; 
			
                }
            }
            
            /// <summary>XGoF generated member.</summary>
            public virtual string titlepub_id
            {
                get
                {
                    
				try 
				{
					return ((System.String)(this[this.tabletitles.titlepub_idColumn]));
				}
				catch (InvalidCastException e) 
				{
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			
                }
                set
                {
                    
				this[this.tabletitles.titlepub_idColumn] = value; 
			
                }
            }
            
            /// <summary>XGoF generated member.</summary>
            public virtual System.Decimal price
            {
                get
                {
                    
				try 
				{
					return ((System.Decimal)(this[this.tabletitles.priceColumn]));
				}
				catch (InvalidCastException e) 
				{
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			
                }
                set
                {
                    
				this[this.tabletitles.priceColumn] = value; 
			
                }
            }
            
            /// <summary>XGoF generated member.</summary>
            public virtual System.Decimal advance
            {
                get
                {
                    
				try 
				{
					return ((System.Decimal)(this[this.tabletitles.advanceColumn]));
				}
				catch (InvalidCastException e) 
				{
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			
                }
                set
                {
                    
				this[this.tabletitles.advanceColumn] = value; 
			
                }
            }
            
            /// <summary>XGoF generated member.</summary>
            public virtual int royalty
            {
                get
                {
                    
				try 
				{
					return ((System.Int32)(this[this.tabletitles.royaltyColumn]));
				}
				catch (InvalidCastException e) 
				{
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			
                }
                set
                {
                    
				this[this.tabletitles.royaltyColumn] = value; 
			
                }
            }
            
            /// <summary>XGoF generated member.</summary>
            public virtual int ytd_sales
            {
                get
                {
                    
				try 
				{
					return ((System.Int32)(this[this.tabletitles.ytd_salesColumn]));
				}
				catch (InvalidCastException e) 
				{
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			
                }
                set
                {
                    
				this[this.tabletitles.ytd_salesColumn] = value; 
			
                }
            }
            
            /// <summary>XGoF generated member.</summary>
            public virtual string notes
            {
                get
                {
                    
				try 
				{
					return ((System.String)(this[this.tabletitles.notesColumn]));
				}
				catch (InvalidCastException e) 
				{
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			
                }
                set
                {
                    
				this[this.tabletitles.notesColumn] = value; 
			
                }
            }
            
            /// <summary>XGoF generated member.</summary>
            public virtual System.DateTime pubdate
            {
                get
                {
                    
				try 
				{
					return ((System.DateTime)(this[this.tabletitles.pubdateColumn]));
				}
				catch (InvalidCastException e) 
				{
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			
                }
                set
                {
                    
				this[this.tabletitles.pubdateColumn] = value; 
			
                }
            }
            
            private bool Istitle_idNull()
            {
                return this.IsNull(this.tabletitles.title_idColumn);
            }
            
            private void Settitle_idNull()
            {
                this[this.tabletitles.title_idColumn] = System.Convert.DBNull;
            }
            
            private bool IstitleNull()
            {
                return this.IsNull(this.tabletitles.titleColumn);
            }
            
            private void SettitleNull()
            {
                this[this.tabletitles.titleColumn] = System.Convert.DBNull;
            }
            
            private bool IstypeNull()
            {
                return this.IsNull(this.tabletitles.typeColumn);
            }
            
            private void SettypeNull()
            {
                this[this.tabletitles.typeColumn] = System.Convert.DBNull;
            }
            
            private bool Istitlepub_idNull()
            {
                return this.IsNull(this.tabletitles.titlepub_idColumn);
            }
            
            private void Settitlepub_idNull()
            {
                this[this.tabletitles.titlepub_idColumn] = System.Convert.DBNull;
            }
            
            private bool IspriceNull()
            {
                return this.IsNull(this.tabletitles.priceColumn);
            }
            
            private void SetpriceNull()
            {
                this[this.tabletitles.priceColumn] = System.Convert.DBNull;
            }
            
            private bool IsadvanceNull()
            {
                return this.IsNull(this.tabletitles.advanceColumn);
            }
            
            private void SetadvanceNull()
            {
                this[this.tabletitles.advanceColumn] = System.Convert.DBNull;
            }
            
            private bool IsroyaltyNull()
            {
                return this.IsNull(this.tabletitles.royaltyColumn);
            }
            
            private void SetroyaltyNull()
            {
                this[this.tabletitles.royaltyColumn] = System.Convert.DBNull;
            }
            
            private bool Isytd_salesNull()
            {
                return this.IsNull(this.tabletitles.ytd_salesColumn);
            }
            
            private void Setytd_salesNull()
            {
                this[this.tabletitles.ytd_salesColumn] = System.Convert.DBNull;
            }
            
            private bool IsnotesNull()
            {
                return this.IsNull(this.tabletitles.notesColumn);
            }
            
            private void SetnotesNull()
            {
                this[this.tabletitles.notesColumn] = System.Convert.DBNull;
            }
            
            private bool IspubdateNull()
            {
                return this.IsNull(this.tabletitles.pubdateColumn);
            }
            
            private void SetpubdateNull()
            {
                this[this.tabletitles.pubdateColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class titleauthorsRow : DataRow
        {
            
            
		private titleauthorsDataTable tabletitleauthors;

		internal titleauthorsRow(DataRowBuilder rb) : base(rb) 
		{
			this.tabletitleauthors = ((titleauthorsDataTable)(this.Table));
		}
		
            /// <summary>XGoF generated member.</summary>
            public virtual string au_id
            {
                get
                {
                    
				try 
				{
					return ((System.String)(this[this.tabletitleauthors.au_idColumn]));
				}
				catch (InvalidCastException e) 
				{
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			
                }
                set
                {
                    
				this[this.tabletitleauthors.au_idColumn] = value; 
			
                }
            }
            
            /// <summary>XGoF generated member.</summary>
            public virtual string title_id
            {
                get
                {
                    
				try 
				{
					return ((System.String)(this[this.tabletitleauthors.title_idColumn]));
				}
				catch (InvalidCastException e) 
				{
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			
                }
                set
                {
                    
				this[this.tabletitleauthors.title_idColumn] = value; 
			
                }
            }
            
            /// <summary>XGoF generated member.</summary>
            public virtual System.Byte au_ord
            {
                get
                {
                    
				try 
				{
					return ((System.Byte)(this[this.tabletitleauthors.au_ordColumn]));
				}
				catch (InvalidCastException e) 
				{
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			
                }
                set
                {
                    
				this[this.tabletitleauthors.au_ordColumn] = value; 
			
                }
            }
            
            /// <summary>XGoF generated member.</summary>
            public virtual int royaltyper
            {
                get
                {
                    
				try 
				{
					return ((System.Int32)(this[this.tabletitleauthors.royaltyperColumn]));
				}
				catch (InvalidCastException e) 
				{
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			
                }
                set
                {
                    
				this[this.tabletitleauthors.royaltyperColumn] = value; 
			
                }
            }
            
            private bool Isau_idNull()
            {
                return this.IsNull(this.tabletitleauthors.au_idColumn);
            }
            
            private void Setau_idNull()
            {
                this[this.tabletitleauthors.au_idColumn] = System.Convert.DBNull;
            }
            
            private bool Istitle_idNull()
            {
                return this.IsNull(this.tabletitleauthors.title_idColumn);
            }
            
            private void Settitle_idNull()
            {
                this[this.tabletitleauthors.title_idColumn] = System.Convert.DBNull;
            }
            
            private bool Isau_ordNull()
            {
                return this.IsNull(this.tabletitleauthors.au_ordColumn);
            }
            
            private void Setau_ordNull()
            {
                this[this.tabletitleauthors.au_ordColumn] = System.Convert.DBNull;
            }
            
            private bool IsroyaltyperNull()
            {
                return this.IsNull(this.tabletitleauthors.royaltyperColumn);
            }
            
            private void SetroyaltyperNull()
            {
                this[this.tabletitleauthors.royaltyperColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class publishersDataTable : DataTable
        {
            
            private System.Data.DataColumn columnpub_id;
            
            private System.Data.DataColumn columnpub_name;
            
            private System.Data.DataColumn columncity;
            
            private System.Data.DataColumn columnstate;
            
            private System.Data.DataColumn columncountry;
            
            
		internal publishersDataTable() : base("publishers")
		{
			this.InitClass();
		}
		
		internal publishersDataTable(DataTable table) : base(table.TableName) 
		{
			if ((table.CaseSensitive != table.DataSet.CaseSensitive))
				this.CaseSensitive = table.CaseSensitive;
			if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
				this.Locale = table.Locale;
			if ((table.Namespace != table.DataSet.Namespace))
				this.Namespace = table.Namespace;
			this.Prefix = table.Prefix;
			this.MinimumCapacity = table.MinimumCapacity;
			this.DisplayExpression = table.DisplayExpression;
		}

		[System.ComponentModel.Browsable(false)]
		public int Count 
		{
			get { return this.Rows.Count; }
		}
		
		public publishersRow this[int index] 
		{
			get { return ((publishersRow)(this.Rows[index])); }
		}

		public event publishersRowChangeEventHandler publishersRowChanged;
		public event publishersRowChangeEventHandler publishersRowChanging;
		public event publishersRowChangeEventHandler publishersRowDeleted;
		public event publishersRowChangeEventHandler publishersRowDeleting;

		public void AddpublishersRow(publishersRow row) 
		{
			this.Rows.Add(row);
		}

		public publishersRow Add(params object[] field)
		{
			publishersRow rowpublishers = ((publishersRow)(this.NewRow()));
			rowpublishers.ItemArray = field;
			this.Rows.Add(rowpublishers);
			return rowpublishers;
		}

		public System.Collections.IEnumerator GetEnumerator() 
		{
			return this.Rows.GetEnumerator();
		}

		public override DataTable Clone() 
		{
			publishersDataTable cln = ((publishersDataTable)(base.Clone()));
			cln.InitVars();
			return cln;
		}

		public publishersRow NewpublishersRow() 
		{
			return ((publishersRow)(this.NewRow()));
		}

		protected override DataRow NewRowFromBuilder(DataRowBuilder builder) 
		{
			return new publishersRow(builder);
		}

		protected override System.Type GetRowType() 
		{
			return typeof(publishersRow);
		}

		protected override void OnRowChanged(DataRowChangeEventArgs e) 
		{
			base.OnRowChanged(e);
			if ((this.publishersRowChanged != null))
				this.publishersRowChanged(this, new publishersRowChangeEvent(((publishersRow)(e.Row)), e.Action));
		}

		protected override void OnRowChanging(DataRowChangeEventArgs e) 
		{
			base.OnRowChanging(e);
			if ((this.publishersRowChanging != null))
				this.publishersRowChanging(this, new publishersRowChangeEvent(((publishersRow)(e.Row)), e.Action));
		}

		protected override void OnRowDeleted(DataRowChangeEventArgs e) 
		{
			base.OnRowDeleted(e);
			if ((this.publishersRowDeleted != null)) 
				this.publishersRowDeleted(this, new publishersRowChangeEvent(((publishersRow)(e.Row)), e.Action));
		}

		protected override void OnRowDeleting(DataRowChangeEventArgs e) 
		{
			base.OnRowDeleting(e);
			if ((this.publishersRowDeleting != null))
				this.publishersRowDeleting(this, new publishersRowChangeEvent(((publishersRow)(e.Row)), e.Action));
		}

		public void RemovepublishersRow(publishersRow row) 
		{
			this.Rows.Remove(row);
		}
		
            internal System.Data.DataColumn pub_idColumn
            {
                get
                {
                    return this.columnpub_id;
                }
            }
            
            internal System.Data.DataColumn pub_nameColumn
            {
                get
                {
                    return this.columnpub_name;
                }
            }
            
            internal System.Data.DataColumn cityColumn
            {
                get
                {
                    return this.columncity;
                }
            }
            
            internal System.Data.DataColumn stateColumn
            {
                get
                {
                    return this.columnstate;
                }
            }
            
            internal System.Data.DataColumn countryColumn
            {
                get
                {
                    return this.columncountry;
                }
            }
            
            private void InitClass()
            {
                this.columnpub_id = new System.Data.DataColumn("pub_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpub_id);
                this.columnpub_name = new System.Data.DataColumn("pub_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpub_name);
                this.columncity = new System.Data.DataColumn("city", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncity);
                this.columnstate = new System.Data.DataColumn("state", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstate);
                this.columncountry = new System.Data.DataColumn("country", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncountry);
                this.Constraints.Add(new System.Data.UniqueConstraint("publishersKey", new System.Data.DataColumn[] {
                                this.columnpub_id,
                                this.columnpub_name}, true));
                this.columnpub_id.AllowDBNull = false;
                this.columnpub_name.AllowDBNull = false;
            }
            
            internal void InitVars()
            {
                this.columnpub_id = this.Columns["pub_id"];
                this.columnpub_name = this.Columns["pub_name"];
                this.columncity = this.Columns["city"];
                this.columnstate = this.Columns["state"];
                this.columncountry = this.Columns["country"];
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class titlesDataTable : DataTable
        {
            
            private System.Data.DataColumn columntitle_id;
            
            private System.Data.DataColumn columntitle;
            
            private System.Data.DataColumn columntype;
            
            private System.Data.DataColumn columntitlepub_id;
            
            private System.Data.DataColumn columnprice;
            
            private System.Data.DataColumn columnadvance;
            
            private System.Data.DataColumn columnroyalty;
            
            private System.Data.DataColumn columnytd_sales;
            
            private System.Data.DataColumn columnnotes;
            
            private System.Data.DataColumn columnpubdate;
            
            
		internal titlesDataTable() : base("titles")
		{
			this.InitClass();
		}
		
		internal titlesDataTable(DataTable table) : base(table.TableName) 
		{
			if ((table.CaseSensitive != table.DataSet.CaseSensitive))
				this.CaseSensitive = table.CaseSensitive;
			if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
				this.Locale = table.Locale;
			if ((table.Namespace != table.DataSet.Namespace))
				this.Namespace = table.Namespace;
			this.Prefix = table.Prefix;
			this.MinimumCapacity = table.MinimumCapacity;
			this.DisplayExpression = table.DisplayExpression;
		}

		[System.ComponentModel.Browsable(false)]
		public int Count 
		{
			get { return this.Rows.Count; }
		}
		
		public titlesRow this[int index] 
		{
			get { return ((titlesRow)(this.Rows[index])); }
		}

		public event titlesRowChangeEventHandler titlesRowChanged;
		public event titlesRowChangeEventHandler titlesRowChanging;
		public event titlesRowChangeEventHandler titlesRowDeleted;
		public event titlesRowChangeEventHandler titlesRowDeleting;

		public void AddtitlesRow(titlesRow row) 
		{
			this.Rows.Add(row);
		}

		public titlesRow Add(params object[] field)
		{
			titlesRow rowtitles = ((titlesRow)(this.NewRow()));
			rowtitles.ItemArray = field;
			this.Rows.Add(rowtitles);
			return rowtitles;
		}

		public System.Collections.IEnumerator GetEnumerator() 
		{
			return this.Rows.GetEnumerator();
		}

		public override DataTable Clone() 
		{
			titlesDataTable cln = ((titlesDataTable)(base.Clone()));
			cln.InitVars();
			return cln;
		}

		public titlesRow NewtitlesRow() 
		{
			return ((titlesRow)(this.NewRow()));
		}

		protected override DataRow NewRowFromBuilder(DataRowBuilder builder) 
		{
			return new titlesRow(builder);
		}

		protected override System.Type GetRowType() 
		{
			return typeof(titlesRow);
		}

		protected override void OnRowChanged(DataRowChangeEventArgs e) 
		{
			base.OnRowChanged(e);
			if ((this.titlesRowChanged != null))
				this.titlesRowChanged(this, new titlesRowChangeEvent(((titlesRow)(e.Row)), e.Action));
		}

		protected override void OnRowChanging(DataRowChangeEventArgs e) 
		{
			base.OnRowChanging(e);
			if ((this.titlesRowChanging != null))
				this.titlesRowChanging(this, new titlesRowChangeEvent(((titlesRow)(e.Row)), e.Action));
		}

		protected override void OnRowDeleted(DataRowChangeEventArgs e) 
		{
			base.OnRowDeleted(e);
			if ((this.titlesRowDeleted != null)) 
				this.titlesRowDeleted(this, new titlesRowChangeEvent(((titlesRow)(e.Row)), e.Action));
		}

		protected override void OnRowDeleting(DataRowChangeEventArgs e) 
		{
			base.OnRowDeleting(e);
			if ((this.titlesRowDeleting != null))
				this.titlesRowDeleting(this, new titlesRowChangeEvent(((titlesRow)(e.Row)), e.Action));
		}

		public void RemovetitlesRow(titlesRow row) 
		{
			this.Rows.Remove(row);
		}
		
            internal System.Data.DataColumn title_idColumn
            {
                get
                {
                    return this.columntitle_id;
                }
            }
            
            internal System.Data.DataColumn titleColumn
            {
                get
                {
                    return this.columntitle;
                }
            }
            
            internal System.Data.DataColumn typeColumn
            {
                get
                {
                    return this.columntype;
                }
            }
            
            internal System.Data.DataColumn titlepub_idColumn
            {
                get
                {
                    return this.columntitlepub_id;
                }
            }
            
            internal System.Data.DataColumn priceColumn
            {
                get
                {
                    return this.columnprice;
                }
            }
            
            internal System.Data.DataColumn advanceColumn
            {
                get
                {
                    return this.columnadvance;
                }
            }
            
            internal System.Data.DataColumn royaltyColumn
            {
                get
                {
                    return this.columnroyalty;
                }
            }
            
            internal System.Data.DataColumn ytd_salesColumn
            {
                get
                {
                    return this.columnytd_sales;
                }
            }
            
            internal System.Data.DataColumn notesColumn
            {
                get
                {
                    return this.columnnotes;
                }
            }
            
            internal System.Data.DataColumn pubdateColumn
            {
                get
                {
                    return this.columnpubdate;
                }
            }
            
            private void InitClass()
            {
                this.columntitle_id = new System.Data.DataColumn("title_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntitle_id);
                this.columntitle = new System.Data.DataColumn("title", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntitle);
                this.columntype = new System.Data.DataColumn("type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntype);
                this.columntitlepub_id = new System.Data.DataColumn("titlepub_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntitlepub_id);
                this.columnprice = new System.Data.DataColumn("price", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnprice);
                this.columnadvance = new System.Data.DataColumn("advance", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnadvance);
                this.columnroyalty = new System.Data.DataColumn("royalty", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnroyalty);
                this.columnytd_sales = new System.Data.DataColumn("ytd_sales", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnytd_sales);
                this.columnnotes = new System.Data.DataColumn("notes", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnotes);
                this.columnpubdate = new System.Data.DataColumn("pubdate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpubdate);
                this.Constraints.Add(new System.Data.UniqueConstraint("titlesKey", new System.Data.DataColumn[] {
                                this.columntitle_id}));
                this.columntitle_id.AllowDBNull = false;
                this.columntitle_id.Unique = true;
            }
            
            internal void InitVars()
            {
                this.columntitle_id = this.Columns["title_id"];
                this.columntitle = this.Columns["title"];
                this.columntype = this.Columns["type"];
                this.columntitlepub_id = this.Columns["titlepub_id"];
                this.columnprice = this.Columns["price"];
                this.columnadvance = this.Columns["advance"];
                this.columnroyalty = this.Columns["royalty"];
                this.columnytd_sales = this.Columns["ytd_sales"];
                this.columnnotes = this.Columns["notes"];
                this.columnpubdate = this.Columns["pubdate"];
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class titleauthorsDataTable : DataTable
        {
            
            private System.Data.DataColumn columnau_id;
            
            private System.Data.DataColumn columntitle_id;
            
            private System.Data.DataColumn columnau_ord;
            
            private System.Data.DataColumn columnroyaltyper;
            
            
		internal titleauthorsDataTable() : base("titleauthors")
		{
			this.InitClass();
		}
		
		internal titleauthorsDataTable(DataTable table) : base(table.TableName) 
		{
			if ((table.CaseSensitive != table.DataSet.CaseSensitive))
				this.CaseSensitive = table.CaseSensitive;
			if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
				this.Locale = table.Locale;
			if ((table.Namespace != table.DataSet.Namespace))
				this.Namespace = table.Namespace;
			this.Prefix = table.Prefix;
			this.MinimumCapacity = table.MinimumCapacity;
			this.DisplayExpression = table.DisplayExpression;
		}

		[System.ComponentModel.Browsable(false)]
		public int Count 
		{
			get { return this.Rows.Count; }
		}
		
		public titleauthorsRow this[int index] 
		{
			get { return ((titleauthorsRow)(this.Rows[index])); }
		}

		public event titleauthorsRowChangeEventHandler titleauthorsRowChanged;
		public event titleauthorsRowChangeEventHandler titleauthorsRowChanging;
		public event titleauthorsRowChangeEventHandler titleauthorsRowDeleted;
		public event titleauthorsRowChangeEventHandler titleauthorsRowDeleting;

		public void AddtitleauthorsRow(titleauthorsRow row) 
		{
			this.Rows.Add(row);
		}

		public titleauthorsRow Add(params object[] field)
		{
			titleauthorsRow rowtitleauthors = ((titleauthorsRow)(this.NewRow()));
			rowtitleauthors.ItemArray = field;
			this.Rows.Add(rowtitleauthors);
			return rowtitleauthors;
		}

		public System.Collections.IEnumerator GetEnumerator() 
		{
			return this.Rows.GetEnumerator();
		}

		public override DataTable Clone() 
		{
			titleauthorsDataTable cln = ((titleauthorsDataTable)(base.Clone()));
			cln.InitVars();
			return cln;
		}

		public titleauthorsRow NewtitleauthorsRow() 
		{
			return ((titleauthorsRow)(this.NewRow()));
		}

		protected override DataRow NewRowFromBuilder(DataRowBuilder builder) 
		{
			return new titleauthorsRow(builder);
		}

		protected override System.Type GetRowType() 
		{
			return typeof(titleauthorsRow);
		}

		protected override void OnRowChanged(DataRowChangeEventArgs e) 
		{
			base.OnRowChanged(e);
			if ((this.titleauthorsRowChanged != null))
				this.titleauthorsRowChanged(this, new titleauthorsRowChangeEvent(((titleauthorsRow)(e.Row)), e.Action));
		}

		protected override void OnRowChanging(DataRowChangeEventArgs e) 
		{
			base.OnRowChanging(e);
			if ((this.titleauthorsRowChanging != null))
				this.titleauthorsRowChanging(this, new titleauthorsRowChangeEvent(((titleauthorsRow)(e.Row)), e.Action));
		}

		protected override void OnRowDeleted(DataRowChangeEventArgs e) 
		{
			base.OnRowDeleted(e);
			if ((this.titleauthorsRowDeleted != null)) 
				this.titleauthorsRowDeleted(this, new titleauthorsRowChangeEvent(((titleauthorsRow)(e.Row)), e.Action));
		}

		protected override void OnRowDeleting(DataRowChangeEventArgs e) 
		{
			base.OnRowDeleting(e);
			if ((this.titleauthorsRowDeleting != null))
				this.titleauthorsRowDeleting(this, new titleauthorsRowChangeEvent(((titleauthorsRow)(e.Row)), e.Action));
		}

		public void RemovetitleauthorsRow(titleauthorsRow row) 
		{
			this.Rows.Remove(row);
		}
		
            internal System.Data.DataColumn au_idColumn
            {
                get
                {
                    return this.columnau_id;
                }
            }
            
            internal System.Data.DataColumn title_idColumn
            {
                get
                {
                    return this.columntitle_id;
                }
            }
            
            internal System.Data.DataColumn au_ordColumn
            {
                get
                {
                    return this.columnau_ord;
                }
            }
            
            internal System.Data.DataColumn royaltyperColumn
            {
                get
                {
                    return this.columnroyaltyper;
                }
            }
            
            private void InitClass()
            {
                this.columnau_id = new System.Data.DataColumn("au_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnau_id);
                this.columntitle_id = new System.Data.DataColumn("title_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntitle_id);
                this.columnau_ord = new System.Data.DataColumn("au_ord", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnau_ord);
                this.columnroyaltyper = new System.Data.DataColumn("royaltyper", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnroyaltyper);
                this.Constraints.Add(new System.Data.UniqueConstraint("titleauthorsKey", new System.Data.DataColumn[] {
                                this.columnau_id,
                                this.columntitle_id}, true));
                this.columnau_id.AllowDBNull = false;
                this.columntitle_id.AllowDBNull = false;
            }
            
            internal void InitVars()
            {
                this.columnau_id = this.Columns["au_id"];
                this.columntitle_id = this.Columns["title_id"];
                this.columnau_ord = this.Columns["au_ord"];
                this.columnroyaltyper = this.Columns["royaltyper"];
            }
        }
    }
}
